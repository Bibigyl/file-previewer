{"version":3,"sources":["previewers/PreviewPDF/PreviewPDF.js","previewers/PreviewDOCX/PreviewDOCX.js","previewers/PreviewXLSX/PreviewXLSX.js","App.js","reportWebVitals.js","index.js"],"names":["PreviewPDF","props","defaultLayoutPluginInstance","defaultLayoutPlugin","useState","fileUrl","setFileUrl","useEffect","file","reader","FileReader","onload","result","readAsDataURL","className","workerUrl","plugins","PreviewDOCX","docHTML","setDocHTML","fontSize","setFontSize","a","mammoth","convertToHtml","arrayBuffer","value","readAsArrayBuffer","dangerouslySetInnerHTML","__html","onClick","PreviewXLSX","cols","rows","data","setData","pages","setPages","currentPage","setCurrentPage","rABS","readAsBinaryString","e","bstr","target","wb","XLSX","read","type","SheetNames","wsname","ws","Sheets","json","utils","sheet_to_json","header","makeCols","refstr","o","C","decode_range","c","i","name","encode_col","key","map","page","r","App","setFile","fileType","setFileType","onChange","ev","newFile","files","split","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4140c46.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Worker, Viewer } from '@react-pdf-viewer/core';\nimport { defaultLayoutPlugin } from '@react-pdf-viewer/default-layout';\nimport '@react-pdf-viewer/default-layout/lib/styles/index.css';\nimport './style.css';\n\nconst PreviewPDF = (props) => {\n\tconst defaultLayoutPluginInstance = defaultLayoutPlugin();\n\tconst [fileUrl, setFileUrl] = useState(null);\n\n\tuseEffect(() => {\n\t\tif (!props.file) setFileUrl(null);\n\t\tconst reader = new FileReader();\n\t\treader.onload = () => {\n\t\t\tsetFileUrl(reader.result);\n\t\t};\n\t\treader.readAsDataURL(props.file);\n\t}, [props.file]);\n\n\treturn (\n\t\t<div className={props.className + ' PreviewPDF'}>\n\t\t\t<Worker workerUrl=\"https://unpkg.com/pdfjs-dist@2.6.347/build/pdf.worker.min.js\">\n\t\t\t\t{fileUrl && (\n\t\t\t\t\t<Viewer fileUrl={fileUrl} plugins={[defaultLayoutPluginInstance]} />\n\t\t\t\t)}\n\t\t\t</Worker>\n\t\t</div>\n\t);\n};\n\nexport { PreviewPDF };","import React, { useState, useEffect } from 'react';\nimport mammoth from 'mammoth';\nimport './style.css';\n\nconst PreviewDOCX = (props) => {\n\tconst [docHTML, setDocHTML] = useState('');\n\tconst [fontSize, setFontSize] = useState(18);\n\n\tuseEffect(() => {\n\t\tif (!props.file) {\n\t\t\tsetDocHTML('');\n\t\t\treturn;\n\t\t}\n\t\tconst reader = new FileReader();\n\t\treader.onload = async () => {\n\t\t\tconst result = await mammoth.convertToHtml({\n\t\t\t\tarrayBuffer: reader.result,\n\t\t\t});\n\t\t\tsetDocHTML(result.value);\n\t\t};\n\t\treader.readAsArrayBuffer(props.file);\n\t}, [docHTML, props.file]);\n\n\treturn (\n\t\t<div className={props.className + ' PreviewDOCX'}>\n\t\t\t<style dangerouslySetInnerHTML={{__html: `\n\t\t\t\t.PreviewDOCX *:not(.button) { font-size: ${fontSize}px }\n\t\t\t`}} />\n\t\t\t<div className=\"buttons\">\n\t\t\t\t<div className=\"button\" onClick={() => setFontSize(fontSize + 2)}>+</div>\t\n\t\t\t\t<div className=\"button\" onClick={() => setFontSize(fontSize - 2)}>âˆ’</div>\n\t\t\t</div>\n\t\t\t<div className=\"sheet\">\n\t\t\t\t<div dangerouslySetInnerHTML={{ __html: docHTML }} />\t\t\t\t\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport { PreviewDOCX };\n","import React, { useState, useEffect } from \"react\";\nimport XLSX from \"xlsx\";\nimport \"./style.css\";\n\nconst PreviewXLSX = (props) => {\n  const [data, setData] = useState({ cols: [], rows: [] });\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(0);\n\n  useEffect(() => {\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n    reader.onload = function (e) {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, { type: rABS ? \"binary\" : \"array\" });\n      setPages(wb.SheetNames);\n\n      /* Get worksheet */\n      const wsname = wb.SheetNames[currentPage];\n      const ws = wb.Sheets[wsname];\n\n      /* Convert array of arrays */\n      const json = XLSX.utils.sheet_to_json(ws, { header: 1 });\n      try {\n        const cols = makeCols(ws[\"!ref\"]);\n        setData({ rows: json, cols: cols });\n      } catch {\n        setData({ rows: [], cols: [] });\n      }\n    };\n    if (props.file && rABS) reader.readAsBinaryString(props.file);\n    else reader.readAsArrayBuffer(props.file);\n  }, [props.file, currentPage]);\n\n  useEffect(() => {\n    setCurrentPage(0);\n  }, [props.file]);\n\n  const makeCols = (refstr) => {\n    const o = [];\n    const C = XLSX.utils.decode_range(refstr).e.c + 1;\n    for (let i = 0; i < C; ++i) {\n      o[i] = { name: XLSX.utils.encode_col(i), key: i };\n    }\n    return o;\n  };\n\n  return (\n    <div className={props.className + \" PreviewXLSX\"}>\n      <div className=\"ExcelTable2007-buttons\">\n        {pages.map((page, i) => (\n          <button\n            className=\"ExcelTable2007-button\"\n            key={i}\n            onClick={() => setCurrentPage(i)}\n          >\n            {page}\n          </button>\n        ))}\n      </div>\n      <table className=\"ExcelTable2007\">\n        <tbody>\n          <tr>\n            <th className=\"heading\"></th>\n            {data.cols.map((c) => (\n              <th key={c.key}>{c.key === -1 ? \"\" : c.name}</th>\n            ))}\n          </tr>\n          {data.rows.map((r, i) => (\n            <tr key={i}>\n              <td key={i} className=\"heading\">\n                {i}\n              </td>\n              {data.cols.map((c) => (\n                <td key={c.key}>{r[c.key]}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport { PreviewXLSX };\n","import React, { useState } from 'react';\nimport { PreviewPDF } from './previewers/PreviewPDF/PreviewPDF.js';\nimport { PreviewDOCX } from './previewers/PreviewDOCX/PreviewDOCX.js';\nimport { PreviewXLSX } from './previewers/PreviewXLSX/PreviewXLSX.js';\nimport './style.css';\n\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [fileType, setFileType] = useState(null);\n\n  const handleFileChange = ev => {\n    const newFile = ev.target.files[0];\n    setFile(newFile || null);\n    setFileType(newFile ? newFile.name.split('.').slice(-1)[0] : null);\n  }\n\n  return (\n    <div className='App'>\n      <div>\n        <input type='file' onChange={handleFileChange}></input>\n      </div>\n      {fileType === 'pdf' && <PreviewPDF file={file} />}\n      {(fileType === 'doc' || fileType === 'docx') && <PreviewDOCX file={file} />}\n      {(fileType === 'xls' || fileType === 'xlsx') && <PreviewXLSX file={file} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}